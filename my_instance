#!/usr/bin/env python






import argparse

import os

import time



import googleapiclient.discovery

from six.moves import input





# [START list_instances]

def list_instances(compute, project, zone):

    result = compute.instances().list(project=project, zone=zone).execute()

    return result['items'] if 'items' in result else None

# [END list_instances]





# [START create_instance]

def create_instance(compute, project, zone, name, bucket):


    image_response = compute.images().getFromFamily(

        project='centos-cloud', family='centos').execute()

    source_disk_image = image_response['selfLink']



    # Configure the machine

    machine_type = "zones/%s/machineTypes/n1-standard-1" % zone

    startup_script = open(

        os.path.join(

            os.path.dirname(__file__), 'startup-script.sh'), 'r').read()



    config = {

        'name': name,

        'machineType': machine_type,



        # Specify the boot disk and the image to use as a source.

        'disks': [

            {

                'boot': True,

                'autoDelete': True,

                'initializeParams': {

                    'sourceImage': source_disk_image,

                }

            }

        ],



        # Specify a network interface with NAT to access the public

        # internet.

        'networkInterfaces': [{

            'network': 'global/networks/default',

            'accessConfigs': [

                {'type': 'ONE_TO_ONE_NAT', 'name': 'External NAT'}

            ]

        }],



        # Allow the instance to access cloud storage and logging.

        'serviceAccounts': [{

            'email': 'default',

            'scopes': [

                'https://www.googleapis.com/auth/devstorage.read_write',

                'https://www.googleapis.com/auth/logging.write'

            ]

        }],



        # Metadata is readable from the instance and allows you to

        # pass configuration from deployment scripts to instances.

        'metadata': {

            'items': [{

                # Startup script is automatically executed by the

                # instance upon startup.

                'key': 'startup-script',

                'value': startup_script

            }, {

                'key': 'url',

                'value': image_url

            }, {

                'key': 'text',

                'value': image_caption

            }, {

                'key': 'bucket',

                'value': bucket

            }]

        }

    }



    return compute.instances().insert(

        project=project,

        zone=zone,

        body=config).execute()

# [END create_instance]










# [START run]

def main(project, bucket, zone, instance_name, wait=True):

    compute = googleapiclient.discovery.build('compute', 'v1')



    print('Creating instance.')



    operation = create_instance(compute, project, zone, my_instance, bucket)

    wait_for_operation(compute, project, zone, operation['my_instance'])



    instances = list_instances(compute, project, zone)



    print('Instances in project %s and zone %s:' % (project, zone))

    for instance in instances:

        print(' - ' + instance['my_instance'])



    print("""
